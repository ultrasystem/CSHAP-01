***************
*** 361,393 ****
  static DEVICE_ATTR(mode, 0644, mode_show, mode_store);
  static DEVICE_ATTR(passive, S_IRUGO | S_IWUSR, passive_show, passive_store);
  
- static struct device_attribute trip_point_attrs[] = {
- 	__ATTR(trip_point_0_type, 0444, trip_point_type_show, NULL),
- 	__ATTR(trip_point_0_temp, 0444, trip_point_temp_show, NULL),
- 	__ATTR(trip_point_1_type, 0444, trip_point_type_show, NULL),
- 	__ATTR(trip_point_1_temp, 0444, trip_point_temp_show, NULL),
- 	__ATTR(trip_point_2_type, 0444, trip_point_type_show, NULL),
- 	__ATTR(trip_point_2_temp, 0444, trip_point_temp_show, NULL),
- 	__ATTR(trip_point_3_type, 0444, trip_point_type_show, NULL),
- 	__ATTR(trip_point_3_temp, 0444, trip_point_temp_show, NULL),
- 	__ATTR(trip_point_4_type, 0444, trip_point_type_show, NULL),
- 	__ATTR(trip_point_4_temp, 0444, trip_point_temp_show, NULL),
- 	__ATTR(trip_point_5_type, 0444, trip_point_type_show, NULL),
- 	__ATTR(trip_point_5_temp, 0444, trip_point_temp_show, NULL),
- 	__ATTR(trip_point_6_type, 0444, trip_point_type_show, NULL),
- 	__ATTR(trip_point_6_temp, 0444, trip_point_temp_show, NULL),
- 	__ATTR(trip_point_7_type, 0444, trip_point_type_show, NULL),
- 	__ATTR(trip_point_7_temp, 0444, trip_point_temp_show, NULL),
- 	__ATTR(trip_point_8_type, 0444, trip_point_type_show, NULL),
- 	__ATTR(trip_point_8_temp, 0444, trip_point_temp_show, NULL),
- 	__ATTR(trip_point_9_type, 0444, trip_point_type_show, NULL),
- 	__ATTR(trip_point_9_temp, 0444, trip_point_temp_show, NULL),
- 	__ATTR(trip_point_10_type, 0444, trip_point_type_show, NULL),
- 	__ATTR(trip_point_10_temp, 0444, trip_point_temp_show, NULL),
- 	__ATTR(trip_point_11_type, 0444, trip_point_type_show, NULL),
- 	__ATTR(trip_point_11_temp, 0444, trip_point_temp_show, NULL),
- };
- 
  /* sys I/F for cooling device */
  #define to_cooling_device(_dev)	\
  	container_of(_dev, struct thermal_cooling_device, device)
--- 429,434 ----
  static DEVICE_ATTR(mode, 0644, mode_show, mode_store);
  static DEVICE_ATTR(passive, S_IRUGO | S_IWUSR, passive_show, passive_store);
  
  /* sys I/F for cooling device */
  #define to_cooling_device(_dev)	\
  	container_of(_dev, struct thermal_cooling_device, device)
***************
*** 1167,1175 ****
  EXPORT_SYMBOL(thermal_zone_device_update);
  
  /**
   * thermal_zone_device_register - register a new thermal zone device
   * @type:	the thermal zone device type
   * @trips:	the number of trip points the thermal zone support
   * @devdata:	private device data
   * @ops:	standard thermal zone device callbacks
   * @tc1:	thermal coefficient 1 for passive calculations
--- 1208,1320 ----
  EXPORT_SYMBOL(thermal_zone_device_update);
  
  /**
+  * create_trip_attrs - create attributes for trip points
+  * @tz:		the thermal zone device
+  * @mask:	Writeable trip point bitmap.
+  */
+ static int create_trip_attrs(struct thermal_zone_device *tz, int mask)
+ {
+ 	int indx;
+ 	int size = sizeof(struct thermal_attr) * tz->trips;
+ 
+ 	tz->trip_type_attrs = kzalloc(size, GFP_KERNEL);
+ 	if (!tz->trip_type_attrs)
+ 		return -ENOMEM;
+ 
+ 	tz->trip_temp_attrs = kzalloc(size, GFP_KERNEL);
+ 	if (!tz->trip_temp_attrs) {
+ 		kfree(tz->trip_type_attrs);
+ 		return -ENOMEM;
+ 	}
+ 
+ 	if (tz->ops->get_trip_hyst) {
+ 		tz->trip_hyst_attrs = kzalloc(size, GFP_KERNEL);
+ 		if (!tz->trip_hyst_attrs) {
+ 			kfree(tz->trip_type_attrs);
+ 			kfree(tz->trip_temp_attrs);
+ 			return -ENOMEM;
+ 		}
+ 	}
+ 
+ 
+ 	for (indx = 0; indx < tz->trips; indx++) {
+ 		/* create trip type attribute */
+ 		snprintf(tz->trip_type_attrs[indx].name, THERMAL_NAME_LENGTH,
+ 			 "trip_point_%d_type", indx);
+ 
+ 		sysfs_attr_init(&tz->trip_type_attrs[indx].attr.attr);
+ 		tz->trip_type_attrs[indx].attr.attr.name =
+ 						tz->trip_type_attrs[indx].name;
+ 		tz->trip_type_attrs[indx].attr.attr.mode = S_IRUGO;
+ 		tz->trip_type_attrs[indx].attr.show = trip_point_type_show;
+ 
+ 		device_create_file(&tz->device,
+ 				   &tz->trip_type_attrs[indx].attr);
+ 
+ 		/* create trip temp attribute */
+ 		snprintf(tz->trip_temp_attrs[indx].name, THERMAL_NAME_LENGTH,
+ 			 "trip_point_%d_temp", indx);
+ 
+ 		sysfs_attr_init(&tz->trip_temp_attrs[indx].attr.attr);
+ 		tz->trip_temp_attrs[indx].attr.attr.name =
+ 						tz->trip_temp_attrs[indx].name;
+ 		tz->trip_temp_attrs[indx].attr.attr.mode = S_IRUGO;
+ 		tz->trip_temp_attrs[indx].attr.show = trip_point_temp_show;
+ 		if (mask & (1 << indx)) {
+ 			tz->trip_temp_attrs[indx].attr.attr.mode |= S_IWUSR;
+ 			tz->trip_temp_attrs[indx].attr.store =
+ 							trip_point_temp_store;
+ 		}
+ 
+ 		device_create_file(&tz->device,
+ 				   &tz->trip_temp_attrs[indx].attr);
+ 
+ 		/* create Optional trip hyst attribute */
+ 		if (!tz->ops->get_trip_hyst)
+ 			continue;
+ 		snprintf(tz->trip_hyst_attrs[indx].name, THERMAL_NAME_LENGTH,
+ 			 "trip_point_%d_hyst", indx);
+ 
+ 		sysfs_attr_init(&tz->trip_hyst_attrs[indx].attr.attr);
+ 		tz->trip_hyst_attrs[indx].attr.attr.name =
+ 					tz->trip_hyst_attrs[indx].name;
+ 		tz->trip_hyst_attrs[indx].attr.attr.mode = S_IRUGO;
+ 		tz->trip_hyst_attrs[indx].attr.show = trip_point_hyst_show;
+ 		if (tz->ops->set_trip_hyst) {
+ 			tz->trip_hyst_attrs[indx].attr.attr.mode |= S_IWUSR;
+ 			tz->trip_hyst_attrs[indx].attr.store =
+ 					trip_point_hyst_store;
+ 		}
+ 
+ 		device_create_file(&tz->device,
+ 				   &tz->trip_hyst_attrs[indx].attr);
+ 	}
+ 	return 0;
+ }
+ 
+ static void remove_trip_attrs(struct thermal_zone_device *tz)
+ {
+ 	int indx;
+ 
+ 	for (indx = 0; indx < tz->trips; indx++) {
+ 		device_remove_file(&tz->device,
+ 				   &tz->trip_type_attrs[indx].attr);
+ 		device_remove_file(&tz->device,
+ 				   &tz->trip_temp_attrs[indx].attr);
+ 		if (tz->ops->get_trip_hyst)
+ 			device_remove_file(&tz->device,
+ 				  &tz->trip_hyst_attrs[indx].attr);
+ 	}
+ 	kfree(tz->trip_type_attrs);
+ 	kfree(tz->trip_temp_attrs);
+ 	kfree(tz->trip_hyst_attrs);
+ }
+ 
+ /**
   * thermal_zone_device_register - register a new thermal zone device
   * @type:	the thermal zone device type
   * @trips:	the number of trip points the thermal zone support
+  * @mask:	a bit string indicating the writeablility of trip points
   * @devdata:	private device data
   * @ops:	standard thermal zone device callbacks
   * @tc1:	thermal coefficient 1 for passive calculations
***************
*** 1184,1191 ****
   * longer needed. The passive cooling formula uses tc1 and tc2 as described in
   * section 11.1.5.1 of the ACPI specification 3.0.
   */
- struct thermal_zone_device *thermal_zone_device_register(char *type,
- 	int trips, void *devdata,
  	const struct thermal_zone_device_ops *ops,
  	int tc1, int tc2, int passive_delay, int polling_delay)
  {
--- 1329,1336 ----
   * longer needed. The passive cooling formula uses tc1 and tc2 as described in
   * section 11.1.5.1 of the ACPI specification 3.0.
   */
+ struct thermal_zone_device *thermal_zone_device_register(const char *type,
+ 	int trips, int mask, void *devdata,
  	const struct thermal_zone_device_ops *ops,
  	int tc1, int tc2, int passive_delay, int polling_delay)
  {
***************
*** 1199,1205 ****
  	if (strlen(type) >= THERMAL_NAME_LENGTH)
  		return ERR_PTR(-EINVAL);
  
- 	if (trips > THERMAL_MAX_TRIPS || trips < 0)
  		return ERR_PTR(-EINVAL);
  
  	if (!ops || !ops->get_temp)
--- 1344,1350 ----
  	if (strlen(type) >= THERMAL_NAME_LENGTH)
  		return ERR_PTR(-EINVAL);
  
+ 	if (trips > THERMAL_MAX_TRIPS || trips < 0 || mask >> trips)
  		return ERR_PTR(-EINVAL);
  
  	if (!ops || !ops->get_temp)
***************
*** 1253,1267 ****
  			goto unregister;
  	}
  
  	for (count = 0; count < trips; count++) {
- 		result = device_create_file(&tz->device,
- 					    &trip_point_attrs[count * 2]);
- 		if (result)
- 			break;
- 		result = device_create_file(&tz->device,
- 					    &trip_point_attrs[count * 2 + 1]);
- 		if (result)
- 			goto unregister;
  		tz->ops->get_trip_type(tz, count, &trip_type);
  		if (trip_type == THERMAL_TRIP_PASSIVE)
  			passive = 1;
--- 1398,1408 ----
  			goto unregister;
  	}
  
+ 	result = create_trip_attrs(tz, mask);
+ 	if (result)
+ 		goto unregister;
+ 
  	for (count = 0; count < trips; count++) {
  		tz->ops->get_trip_type(tz, count, &trip_type);
  		if (trip_type == THERMAL_TRIP_PASSIVE)
  			passive = 1;
***************
*** 1310,1316 ****
  {
  	struct thermal_cooling_device *cdev;
  	struct thermal_zone_device *pos = NULL;
- 	int count;
  
  	if (!tz)
  		return;
--- 1451,1456 ----
  {
  	struct thermal_cooling_device *cdev;
  	struct thermal_zone_device *pos = NULL;
  
  	if (!tz)
  		return;
***************
*** 1337,1349 ****
  	device_remove_file(&tz->device, &dev_attr_temp);
  	if (tz->ops->get_mode)
  		device_remove_file(&tz->device, &dev_attr_mode);
  
- 	for (count = 0; count < tz->trips; count++) {
- 		device_remove_file(&tz->device,
- 				   &trip_point_attrs[count * 2]);
- 		device_remove_file(&tz->device,
- 				   &trip_point_attrs[count * 2 + 1]);
- 	}
  	thermal_remove_hwmon_sysfs(tz);
  	release_idr(&thermal_tz_idr, &thermal_idr_lock, tz->id);
  	idr_destroy(&tz->idr);
--- 1477,1484 ----
  	device_remove_file(&tz->device, &dev_attr_temp);
  	if (tz->ops->get_mode)
  		device_remove_file(&tz->device, &dev_attr_mode);
+ 	remove_trip_attrs(tz);
  
  	thermal_remove_hwmon_sysfs(tz);
  	release_idr(&thermal_tz_idr, &thermal_idr_lock, tz->id);
  	idr_destroy(&tz->idr);
