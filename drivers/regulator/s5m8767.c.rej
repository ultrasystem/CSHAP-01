***************
*** 41,86 ****
  	u8 buck3_vol[8];
  	u8 buck4_vol[8];
  	int buck_gpios[3];
  	int buck_gpioindex;
  };
  
- struct s5m_voltage_desc {
  	int max;
  	int min;
  	int step;
  };
  
- static const struct s5m_voltage_desc buck_voltage_val1 = {
  	.max = 2225000,
  	.min =  650000,
  	.step =   6250,
  };
  
- static const struct s5m_voltage_desc buck_voltage_val2 = {
  	.max = 1600000,
  	.min =  600000,
  	.step =   6250,
  };
  
- static const struct s5m_voltage_desc buck_voltage_val3 = {
  	.max = 3000000,
  	.min =  750000,
  	.step =  12500,
  };
  
- static const struct s5m_voltage_desc ldo_voltage_val1 = {
  	.max = 3950000,
  	.min =  800000,
  	.step =  50000,
  };
  
- static const struct s5m_voltage_desc ldo_voltage_val2 = {
  	.max = 2375000,
  	.min =  800000,
  	.step =  25000,
  };
  
- static const struct s5m_voltage_desc *reg_voltage_map[] = {
  	[S5M8767_LDO1] = &ldo_voltage_val2,
  	[S5M8767_LDO2] = &ldo_voltage_val2,
  	[S5M8767_LDO3] = &ldo_voltage_val1,
--- 41,87 ----
  	u8 buck3_vol[8];
  	u8 buck4_vol[8];
  	int buck_gpios[3];
+ 	int buck_ds[3];
  	int buck_gpioindex;
  };
  
+ struct sec_voltage_desc {
  	int max;
  	int min;
  	int step;
  };
  
+ static const struct sec_voltage_desc buck_voltage_val1 = {
  	.max = 2225000,
  	.min =  650000,
  	.step =   6250,
  };
  
+ static const struct sec_voltage_desc buck_voltage_val2 = {
  	.max = 1600000,
  	.min =  600000,
  	.step =   6250,
  };
  
+ static const struct sec_voltage_desc buck_voltage_val3 = {
  	.max = 3000000,
  	.min =  750000,
  	.step =  12500,
  };
  
+ static const struct sec_voltage_desc ldo_voltage_val1 = {
  	.max = 3950000,
  	.min =  800000,
  	.step =  50000,
  };
  
+ static const struct sec_voltage_desc ldo_voltage_val2 = {
  	.max = 2375000,
  	.min =  800000,
  	.step =  25000,
  };
  
+ static const struct sec_voltage_desc *reg_voltage_map[] = {
  	[S5M8767_LDO1] = &ldo_voltage_val2,
  	[S5M8767_LDO2] = &ldo_voltage_val2,
  	[S5M8767_LDO3] = &ldo_voltage_val1,
***************
*** 336,342 ****
  	if (ret)
  		return ret;
  
- 	return s5m_reg_update(s5m8767->iodev, reg, enable_ctrl, mask);
  }
  
  static int s5m8767_reg_disable(struct regulator_dev *rdev)
--- 316,322 ----
  	if (ret)
  		return ret;
  
+ 	return sec_reg_update(s5m8767->iodev, reg, enable_ctrl, mask);
  }
  
  static int s5m8767_reg_disable(struct regulator_dev *rdev)
***************
*** 349,355 ****
  	if (ret)
  		return ret;
  
- 	return s5m_reg_update(s5m8767->iodev, reg, ~mask, mask);
  }
  
  static int s5m8767_get_voltage_register(struct regulator_dev *rdev, int *_reg)
--- 329,335 ----
  	if (ret)
  		return ret;
  
+ 	return sec_reg_update(s5m8767->iodev, reg, ~mask, mask);
  }
  
  static int s5m8767_get_voltage_register(struct regulator_dev *rdev, int *_reg)
***************
*** 475,506 ****
  	return selector;
  }
  
- static inline void s5m8767_set_high(struct s5m8767_info *s5m8767)
  {
  	int temp_index = s5m8767->buck_gpioindex;
  
  	gpio_set_value(s5m8767->buck_gpios[0], (temp_index >> 2) & 0x1);
  	gpio_set_value(s5m8767->buck_gpios[1], (temp_index >> 1) & 0x1);
  	gpio_set_value(s5m8767->buck_gpios[2], temp_index & 0x1);
  }
  
- static inline void s5m8767_set_low(struct s5m8767_info *s5m8767)
  {
  	int temp_index = s5m8767->buck_gpioindex;
  
  	gpio_set_value(s5m8767->buck_gpios[2], temp_index & 0x1);
  	gpio_set_value(s5m8767->buck_gpios[1], (temp_index >> 1) & 0x1);
  	gpio_set_value(s5m8767->buck_gpios[0], (temp_index >> 2) & 0x1);
  }
  
- static int s5m8767_set_voltage(struct regulator_dev *rdev,
- 				int min_uV, int max_uV, unsigned *selector)
  {
  	struct s5m8767_info *s5m8767 = rdev_get_drvdata(rdev);
- 	const struct s5m_voltage_desc *desc;
  	int reg_id = rdev_get_id(rdev);
- 	int sel, reg, mask, ret = 0, old_index, index = 0;
- 	u8 val;
  	u8 *buck234_vol = NULL;
  
  	switch (reg_id) {
--- 455,488 ----
  	return selector;
  }
  
+ static inline int s5m8767_set_high(struct s5m8767_info *s5m8767)
  {
  	int temp_index = s5m8767->buck_gpioindex;
  
  	gpio_set_value(s5m8767->buck_gpios[0], (temp_index >> 2) & 0x1);
  	gpio_set_value(s5m8767->buck_gpios[1], (temp_index >> 1) & 0x1);
  	gpio_set_value(s5m8767->buck_gpios[2], temp_index & 0x1);
+ 
+ 	return 0;
  }
  
+ static inline int s5m8767_set_low(struct s5m8767_info *s5m8767)
  {
  	int temp_index = s5m8767->buck_gpioindex;
  
  	gpio_set_value(s5m8767->buck_gpios[2], temp_index & 0x1);
  	gpio_set_value(s5m8767->buck_gpios[1], (temp_index >> 1) & 0x1);
  	gpio_set_value(s5m8767->buck_gpios[0], (temp_index >> 2) & 0x1);
+ 
+ 	return 0;
  }
  
+ static int s5m8767_set_voltage_sel(struct regulator_dev *rdev,
+ 				   unsigned selector)
  {
  	struct s5m8767_info *s5m8767 = rdev_get_drvdata(rdev);
  	int reg_id = rdev_get_id(rdev);
+ 	int reg, mask, ret = 0, old_index, index = 0;
  	u8 *buck234_vol = NULL;
  
  	switch (reg_id) {
***************
*** 541,562 ****
  		s5m8767->buck_gpioindex = index;
  
  		if (index > old_index)
- 			s5m8767_set_high(s5m8767);
  		else
- 			s5m8767_set_low(s5m8767);
  	} else {
  		ret = s5m8767_get_voltage_register(rdev, &reg);
  		if (ret)
  			return ret;
  
- 		s5m_reg_read(s5m8767->iodev, reg, &val);
- 		val = (val & ~mask) | sel;
- 
- 		ret = s5m_reg_write(s5m8767->iodev, reg, val);
  	}
- 
- 	*selector = sel;
- 	return ret;
  }
  
  static int s5m8767_set_voltage_time_sel(struct regulator_dev *rdev,
--- 517,532 ----
  		s5m8767->buck_gpioindex = index;
  
  		if (index > old_index)
+ 			return s5m8767_set_high(s5m8767);
  		else
+ 			return s5m8767_set_low(s5m8767);
  	} else {
  		ret = s5m8767_get_voltage_register(rdev, &reg);
  		if (ret)
  			return ret;
  
+ 		return sec_reg_update(s5m8767->iodev, reg, selector, mask);
  	}
  }
  
  static int s5m8767_set_voltage_time_sel(struct regulator_dev *rdev,
***************
*** 579,593 ****
  }
  
  static struct regulator_ops s5m8767_ops = {
- 	.list_voltage		= s5m8767_list_voltage,
  	.is_enabled		= s5m8767_reg_is_enabled,
  	.enable			= s5m8767_reg_enable,
  	.disable		= s5m8767_reg_disable,
  	.get_voltage_sel	= s5m8767_get_voltage_sel,
- 	.set_voltage		= s5m8767_set_voltage,
  	.set_voltage_time_sel	= s5m8767_set_voltage_time_sel,
  };
  
  #define s5m8767_regulator_desc(_name) {		\
  	.name		= #_name,		\
  	.id		= S5M8767_##_name,	\
--- 549,569 ----
  }
  
  static struct regulator_ops s5m8767_ops = {
+ 	.list_voltage		= regulator_list_voltage_linear,
  	.is_enabled		= s5m8767_reg_is_enabled,
  	.enable			= s5m8767_reg_enable,
  	.disable		= s5m8767_reg_disable,
  	.get_voltage_sel	= s5m8767_get_voltage_sel,
+ 	.set_voltage_sel	= s5m8767_set_voltage_sel,
  	.set_voltage_time_sel	= s5m8767_set_voltage_time_sel,
  };
  
+ static struct regulator_ops s5m8767_buck78_ops = {
+ 	.is_enabled		= s5m8767_reg_is_enabled,
+ 	.enable			= s5m8767_reg_enable,
+ 	.disable		= s5m8767_reg_disable,
+ };
+ 
  #define s5m8767_regulator_desc(_name) {		\
  	.name		= #_name,		\
  	.id		= S5M8767_##_name,	\
***************
*** 631,649 ****
  	s5m8767_regulator_desc(BUCK4),
  	s5m8767_regulator_desc(BUCK5),
  	s5m8767_regulator_desc(BUCK6),
- 	s5m8767_regulator_desc(BUCK7),
- 	s5m8767_regulator_desc(BUCK8),
  	s5m8767_regulator_desc(BUCK9),
  };
  
  static __devinit int s5m8767_pmic_probe(struct platform_device *pdev)
  {
- 	struct s5m87xx_dev *iodev = dev_get_drvdata(pdev->dev.parent);
- 	struct s5m_platform_data *pdata = dev_get_platdata(iodev->dev);
  	struct regulator_config config = { };
  	struct regulator_dev **rdev;
  	struct s5m8767_info *s5m8767;
- 	int i, ret, size;
  
  	if (!pdata) {
  		dev_err(pdev->dev.parent, "Platform data not supplied\n");
--- 615,633 ----
  	s5m8767_regulator_desc(BUCK4),
  	s5m8767_regulator_desc(BUCK5),
  	s5m8767_regulator_desc(BUCK6),
+ 	s5m8767_regulator_buck78_desc(BUCK7),
+ 	s5m8767_regulator_buck78_desc(BUCK8),
  	s5m8767_regulator_desc(BUCK9),
  };
  
  static __devinit int s5m8767_pmic_probe(struct platform_device *pdev)
  {
+ 	struct sec_pmic_dev *iodev = dev_get_drvdata(pdev->dev.parent);
+ 	struct sec_platform_data *pdata = dev_get_platdata(iodev->dev);
  	struct regulator_config config = { };
  	struct regulator_dev **rdev;
  	struct s5m8767_info *s5m8767;
+ 	int i, ret, size, buck_init;
  
  	if (!pdata) {
  		dev_err(pdev->dev.parent, "Platform data not supplied\n");
***************
*** 730,841 ****
  		}
  	}
  
- 	if (pdata->buck2_gpiodvs || pdata->buck3_gpiodvs ||
- 		pdata->buck4_gpiodvs) {
- 		if (gpio_is_valid(pdata->buck_gpios[0]) &&
- 			gpio_is_valid(pdata->buck_gpios[1]) &&
- 			gpio_is_valid(pdata->buck_gpios[2])) {
- 			ret = gpio_request(pdata->buck_gpios[0],
- 						"S5M8767 SET1");
- 			if (ret == -EBUSY)
- 				dev_warn(&pdev->dev, "Duplicated gpio request for SET1\n");
- 
- 			ret = gpio_request(pdata->buck_gpios[1],
- 					   "S5M8767 SET2");
- 			if (ret == -EBUSY)
- 				dev_warn(&pdev->dev, "Duplicated gpio request for SET2\n");
- 
- 			ret = gpio_request(pdata->buck_gpios[2],
- 					   "S5M8767 SET3");
- 			if (ret == -EBUSY)
- 				dev_warn(&pdev->dev, "Duplicated gpio request for SET3\n");
- 			/* SET1 GPIO */
- 			gpio_direction_output(pdata->buck_gpios[0],
- 					(s5m8767->buck_gpioindex >> 2) & 0x1);
- 			/* SET2 GPIO */
- 			gpio_direction_output(pdata->buck_gpios[1],
- 					(s5m8767->buck_gpioindex >> 1) & 0x1);
- 			/* SET3 GPIO */
- 			gpio_direction_output(pdata->buck_gpios[2],
- 					(s5m8767->buck_gpioindex >> 0) & 0x1);
- 			ret = 0;
- 		} else {
- 			dev_err(&pdev->dev, "GPIO NOT VALID\n");
- 			ret = -EINVAL;
  			return ret;
- 		}
  	}
  
- 	s5m_reg_update(s5m8767->iodev, S5M8767_REG_BUCK2CTRL,
- 			(pdata->buck2_gpiodvs) ? (1 << 1) : (0 << 1), 1 << 1);
- 	s5m_reg_update(s5m8767->iodev, S5M8767_REG_BUCK3CTRL,
- 			(pdata->buck3_gpiodvs) ? (1 << 1) : (0 << 1), 1 << 1);
- 	s5m_reg_update(s5m8767->iodev, S5M8767_REG_BUCK4CTRL,
- 			(pdata->buck4_gpiodvs) ? (1 << 1) : (0 << 1), 1 << 1);
  
  	/* Initialize GPIO DVS registers */
  	for (i = 0; i < 8; i++) {
  		if (s5m8767->buck2_gpiodvs) {
- 			s5m_reg_write(s5m8767->iodev, S5M8767_REG_BUCK2DVS1 + i,
  					   s5m8767->buck2_vol[i]);
  		}
  
  		if (s5m8767->buck3_gpiodvs) {
- 			s5m_reg_write(s5m8767->iodev, S5M8767_REG_BUCK3DVS1 + i,
  					   s5m8767->buck3_vol[i]);
  		}
  
  		if (s5m8767->buck4_gpiodvs) {
- 			s5m_reg_write(s5m8767->iodev, S5M8767_REG_BUCK4DVS1 + i,
  					   s5m8767->buck4_vol[i]);
  		}
  	}
- 	s5m_reg_update(s5m8767->iodev, S5M8767_REG_BUCK2CTRL, 0x78, 0xff);
- 	s5m_reg_update(s5m8767->iodev, S5M8767_REG_BUCK3CTRL, 0x58, 0xff);
- 	s5m_reg_update(s5m8767->iodev, S5M8767_REG_BUCK4CTRL, 0x78, 0xff);
  
  	if (s5m8767->buck2_ramp)
- 		s5m_reg_update(s5m8767->iodev, S5M8767_REG_DVSRAMP, 0x08, 0x08);
  
  	if (s5m8767->buck3_ramp)
- 		s5m_reg_update(s5m8767->iodev, S5M8767_REG_DVSRAMP, 0x04, 0x04);
  
  	if (s5m8767->buck4_ramp)
- 		s5m_reg_update(s5m8767->iodev, S5M8767_REG_DVSRAMP, 0x02, 0x02);
  
  	if (s5m8767->buck2_ramp || s5m8767->buck3_ramp
  		|| s5m8767->buck4_ramp) {
  		switch (s5m8767->ramp_delay) {
- 		case 15:
- 			s5m_reg_update(s5m8767->iodev, S5M8767_REG_DVSRAMP,
- 					0xc0, 0xf0);
  			break;
  		case 25:
- 			s5m_reg_update(s5m8767->iodev, S5M8767_REG_DVSRAMP,
  					0xd0, 0xf0);
  			break;
  		case 50:
- 			s5m_reg_update(s5m8767->iodev, S5M8767_REG_DVSRAMP,
  					0xe0, 0xf0);
  			break;
  		case 100:
- 			s5m_reg_update(s5m8767->iodev, S5M8767_REG_DVSRAMP,
  					0xf0, 0xf0);
  			break;
  		default:
- 			s5m_reg_update(s5m8767->iodev, S5M8767_REG_DVSRAMP,
  					0x90, 0xf0);
  		}
  	}
  
  	for (i = 0; i < pdata->num_regulators; i++) {
- 		const struct s5m_voltage_desc *desc;
  		int id = pdata->regulators[i].id;
  
  		desc = reg_voltage_map[id];
- 		if (desc)
  			regulators[id].n_voltages =
  				(desc->max - desc->min) / desc->step + 1;
  
  		config.dev = s5m8767->dev;
  		config.init_data = pdata->regulators[i].initdata;
--- 739,876 ----
  		}
  	}
  
+ 	if (gpio_is_valid(pdata->buck_gpios[0]) &&
+ 		gpio_is_valid(pdata->buck_gpios[1]) &&
+ 		gpio_is_valid(pdata->buck_gpios[2])) {
+ 		ret = devm_gpio_request(&pdev->dev, pdata->buck_gpios[0],
+ 					"S5M8767 SET1");
+ 		if (ret)
  			return ret;
+ 
+ 		ret = devm_gpio_request(&pdev->dev, pdata->buck_gpios[1],
+ 					"S5M8767 SET2");
+ 		if (ret)
+ 			return ret;
+ 
+ 		ret = devm_gpio_request(&pdev->dev, pdata->buck_gpios[2],
+ 					"S5M8767 SET3");
+ 		if (ret)
+ 			return ret;
+ 
+ 		/* SET1 GPIO */
+ 		gpio_direction_output(pdata->buck_gpios[0],
+ 				(s5m8767->buck_gpioindex >> 2) & 0x1);
+ 		/* SET2 GPIO */
+ 		gpio_direction_output(pdata->buck_gpios[1],
+ 				(s5m8767->buck_gpioindex >> 1) & 0x1);
+ 		/* SET3 GPIO */
+ 		gpio_direction_output(pdata->buck_gpios[2],
+ 				(s5m8767->buck_gpioindex >> 0) & 0x1);
+ 	} else {
+ 		dev_err(&pdev->dev, "GPIO NOT VALID\n");
+ 		ret = -EINVAL;
+ 		return ret;
  	}
  
+ 	ret = devm_gpio_request(&pdev->dev, pdata->buck_ds[0], "S5M8767 DS2");
+ 	if (ret)
+ 		return ret;
+ 
+ 	ret = devm_gpio_request(&pdev->dev, pdata->buck_ds[1], "S5M8767 DS3");
+ 	if (ret)
+ 		return ret;
+ 
+ 	ret = devm_gpio_request(&pdev->dev, pdata->buck_ds[2], "S5M8767 DS4");
+ 	if (ret)
+ 		return ret;
+ 
+ 	/* DS2 GPIO */
+ 	gpio_direction_output(pdata->buck_ds[0], 0x0);
+ 	/* DS3 GPIO */
+ 	gpio_direction_output(pdata->buck_ds[1], 0x0);
+ 	/* DS4 GPIO */
+ 	gpio_direction_output(pdata->buck_ds[2], 0x0);
+ 
+ 	if (pdata->buck2_gpiodvs || pdata->buck3_gpiodvs ||
+ 	   pdata->buck4_gpiodvs) {
+ 		sec_reg_update(s5m8767->iodev, S5M8767_REG_BUCK2CTRL,
+ 				(pdata->buck2_gpiodvs) ? (1 << 1) : (0 << 1),
+ 				1 << 1);
+ 		sec_reg_update(s5m8767->iodev, S5M8767_REG_BUCK3CTRL,
+ 				(pdata->buck3_gpiodvs) ? (1 << 1) : (0 << 1),
+ 				1 << 1);
+ 		sec_reg_update(s5m8767->iodev, S5M8767_REG_BUCK4CTRL,
+ 				(pdata->buck4_gpiodvs) ? (1 << 1) : (0 << 1),
+ 				1 << 1);
+ 	}
  
  	/* Initialize GPIO DVS registers */
  	for (i = 0; i < 8; i++) {
  		if (s5m8767->buck2_gpiodvs) {
+ 			sec_reg_write(s5m8767->iodev, S5M8767_REG_BUCK2DVS1 + i,
  					   s5m8767->buck2_vol[i]);
  		}
  
  		if (s5m8767->buck3_gpiodvs) {
+ 			sec_reg_write(s5m8767->iodev, S5M8767_REG_BUCK3DVS1 + i,
  					   s5m8767->buck3_vol[i]);
  		}
  
  		if (s5m8767->buck4_gpiodvs) {
+ 			sec_reg_write(s5m8767->iodev, S5M8767_REG_BUCK4DVS1 + i,
  					   s5m8767->buck4_vol[i]);
  		}
  	}
  
  	if (s5m8767->buck2_ramp)
+ 		sec_reg_update(s5m8767->iodev, S5M8767_REG_DVSRAMP, 0x08, 0x08);
  
  	if (s5m8767->buck3_ramp)
+ 		sec_reg_update(s5m8767->iodev, S5M8767_REG_DVSRAMP, 0x04, 0x04);
  
  	if (s5m8767->buck4_ramp)
+ 		sec_reg_update(s5m8767->iodev, S5M8767_REG_DVSRAMP, 0x02, 0x02);
  
  	if (s5m8767->buck2_ramp || s5m8767->buck3_ramp
  		|| s5m8767->buck4_ramp) {
  		switch (s5m8767->ramp_delay) {
+ 		case 5:
+ 			sec_reg_update(s5m8767->iodev, S5M8767_REG_DVSRAMP,
+ 					0x40, 0xf0);
+ 			break;
+ 		case 10:
+ 			sec_reg_update(s5m8767->iodev, S5M8767_REG_DVSRAMP,
+ 					0x90, 0xf0);
  			break;
  		case 25:
+ 			sec_reg_update(s5m8767->iodev, S5M8767_REG_DVSRAMP,
  					0xd0, 0xf0);
  			break;
  		case 50:
+ 			sec_reg_update(s5m8767->iodev, S5M8767_REG_DVSRAMP,
  					0xe0, 0xf0);
  			break;
  		case 100:
+ 			sec_reg_update(s5m8767->iodev, S5M8767_REG_DVSRAMP,
  					0xf0, 0xf0);
  			break;
  		default:
+ 			sec_reg_update(s5m8767->iodev, S5M8767_REG_DVSRAMP,
  					0x90, 0xf0);
  		}
  	}
  
  	for (i = 0; i < pdata->num_regulators; i++) {
+ 		const struct sec_voltage_desc *desc;
  		int id = pdata->regulators[i].id;
  
  		desc = reg_voltage_map[id];
+ 		if (desc) {
  			regulators[id].n_voltages =
  				(desc->max - desc->min) / desc->step + 1;
+ 			regulators[id].min_uV = desc->min;
+ 			regulators[id].uV_step = desc->step;
+ 		}
  
  		config.dev = s5m8767->dev;
  		config.init_data = pdata->regulators[i].initdata;
