***************
*** 244,255 ****
  	void (*buf_queue)(struct vb2_buffer *vb);
  };
  
  /**
   * struct vb2_queue - a videobuf queue
   *
   * @type:	queue type (see V4L2_BUF_TYPE_* in linux/videodev2.h
   * @io_modes:	supported io methods (see vb2_io_modes enum)
   * @io_flags:	additional io flags (see vb2_fileio_flags enum)
   * @ops:	driver-specific callbacks
   * @mem_ops:	memory allocator specific callbacks
   * @drv_priv:	driver private data
--- 244,266 ----
  	void (*buf_queue)(struct vb2_buffer *vb);
  };
  
+ struct v4l2_fh;
+ 
  /**
   * struct vb2_queue - a videobuf queue
   *
   * @type:	queue type (see V4L2_BUF_TYPE_* in linux/videodev2.h
   * @io_modes:	supported io methods (see vb2_io_modes enum)
   * @io_flags:	additional io flags (see vb2_fileio_flags enum)
+  * @lock:	pointer to a mutex that protects the vb2_queue struct. The
+  *		driver can set this to a mutex to let the v4l2 core serialize
+  *		the queuing ioctls. If the driver wants to handle locking
+  *		itself, then this should be set to NULL. This lock is not used
+  *		by the videobuf2 core API.
+  * @owner:	The filehandle that 'owns' the buffers, i.e. the filehandle
+  *		that called reqbufs, create_buffers or started fileio.
+  *		This field is not used by the videobuf2 core API, but it allows
+  *		drivers to easily associate an owner filehandle with the queue.
   * @ops:	driver-specific callbacks
   * @mem_ops:	memory allocator specific callbacks
   * @drv_priv:	driver private data
