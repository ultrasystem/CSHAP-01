***************
*** 67,72 ****
   *
   * @enable_time: Time taken for the regulator voltage output voltage to
   *               stabilise after being enabled, in microseconds.
   * @set_voltage_time_sel: Time taken for the regulator voltage output voltage
   *               to stabilise after being set to a new value, in microseconds.
   *               The function provides the from and to voltage selector, the
--- 69,76 ----
   *
   * @enable_time: Time taken for the regulator voltage output voltage to
   *               stabilise after being enabled, in microseconds.
+  * @set_ramp_delay: Set the ramp delay for the regulator. The driver should
+  *		select ramp delay equal to or less than(closest) ramp_delay.
   * @set_voltage_time_sel: Time taken for the regulator voltage output voltage
   *               to stabilise after being set to a new value, in microseconds.
   *               The function provides the from and to voltage selector, the
***************
*** 113,118 ****
  
  	/* Time taken to enable or set voltage on the regulator */
  	int (*enable_time) (struct regulator_dev *);
  	int (*set_voltage_time_sel) (struct regulator_dev *,
  				     unsigned int old_selector,
  				     unsigned int new_selector);
--- 117,123 ----
  
  	/* Time taken to enable or set voltage on the regulator */
  	int (*enable_time) (struct regulator_dev *);
+ 	int (*set_ramp_delay) (struct regulator_dev *, int ramp_delay);
  	int (*set_voltage_time_sel) (struct regulator_dev *,
  				     unsigned int old_selector,
  				     unsigned int new_selector);
***************
*** 170,180 ****
   *
   * @min_uV: Voltage given by the lowest selector (if linear mapping)
   * @uV_step: Voltage increase with each selector (if linear mapping)
   *
   * @vsel_reg: Register for selector when using regulator_regmap_X_voltage_
   * @vsel_mask: Mask for register bitfield used for selector
   * @enable_reg: Register for control when using regmap enable/disable ops
   * @enable_mask: Mask for control when using regmap enable/disable ops
   */
  struct regulator_desc {
  	const char *name;
--- 175,189 ----
   *
   * @min_uV: Voltage given by the lowest selector (if linear mapping)
   * @uV_step: Voltage increase with each selector (if linear mapping)
+  * @ramp_delay: Time to settle down after voltage change (unit: uV/us)
+  * @volt_table: Voltage mapping table (if table based mapping)
   *
   * @vsel_reg: Register for selector when using regulator_regmap_X_voltage_
   * @vsel_mask: Mask for register bitfield used for selector
   * @enable_reg: Register for control when using regmap enable/disable ops
   * @enable_mask: Mask for control when using regmap enable/disable ops
+  *
+  * @enable_time: Time taken for initial enable of regulator (in uS).
   */
  struct regulator_desc {
  	const char *name;
***************
*** 188,198 ****
  
  	unsigned int min_uV;
  	unsigned int uV_step;
  
  	unsigned int vsel_reg;
  	unsigned int vsel_mask;
  	unsigned int enable_reg;
  	unsigned int enable_mask;
  };
  
  /**
--- 197,212 ----
  
  	unsigned int min_uV;
  	unsigned int uV_step;
+ 	unsigned int ramp_delay;
+ 
+ 	const unsigned int *volt_table;
  
  	unsigned int vsel_reg;
  	unsigned int vsel_mask;
  	unsigned int enable_reg;
  	unsigned int enable_mask;
+ 
+ 	unsigned int enable_time;
  };
  
  /**
***************
*** 290,295 ****
  int regulator_is_enabled_regmap(struct regulator_dev *rdev);
  int regulator_enable_regmap(struct regulator_dev *rdev);
  int regulator_disable_regmap(struct regulator_dev *rdev);
  
  void *regulator_get_init_drvdata(struct regulator_init_data *reg_init_data);
  
--- 317,325 ----
  int regulator_is_enabled_regmap(struct regulator_dev *rdev);
  int regulator_enable_regmap(struct regulator_dev *rdev);
  int regulator_disable_regmap(struct regulator_dev *rdev);
+ int regulator_set_voltage_time_sel(struct regulator_dev *rdev,
+ 				   unsigned int old_selector,
+ 				   unsigned int new_selector);
  
  void *regulator_get_init_drvdata(struct regulator_init_data *reg_init_data);
  
